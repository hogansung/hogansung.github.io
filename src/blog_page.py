import os
import time
import re
import hashlib

from base_page import BasePage


class ArticlePage(BasePage):

    def __init__(self, _article_folder, proj_name):
        super().__init__()
        self._article_folder = _article_folder
        self._domain_url = 'www.hogansung.com'
        self.article_path = os.path.join(proj_name, 'article.md')
        self.html_path = os.path.join(proj_name, 'article.html')
        self.article_hash = hashlib.md5(open(self.article_path, 'rb').read()).hexdigest()
        self.mtime = time.ctime(os.path.getmtime(self.article_path))
        self.cur_link = os.path.join(self._article_folder, 'article_'+ self.article_hash + '.html')
        self.url = os.path.join(self._domain_url, self._article_folder, 'article_'+ self.article_hash + '.html')

        # create article html
        os.system('pandoc -f markdown -t html ' + self.article_path + ' -o ' + self.html_path)

        # get information from html
        lines = open(self.html_path).readlines()
        self.title = self.extract(lines[0])
        self.sub_title = self.extract(lines[1])
        for line in lines:
            if line[:3] == '<p>':
                self.summary = self.extract(line)
                break
        self.blog_text = ''.join([' ' * 20 + line for line in lines[2:]])
        self._extra_dict = {
            'FACEBOOK_MODERATION': '''
        <!-- Facebook moderate console -->
        <meta property="fb:app_id" content="158857908084540"/>
        <meta property="og:url" content="{URL}"/>
        <meta property="og:title" content="{TITLE}"/>
        <meta property="og:description" content="{SUB_TITLE}"/>
        <meta property="og:type" content="website"/>
        <meta property="og:site_name" content="Hogan's Personal Website"/>

'''.format(URL=self.url, TITLE=self.title, SUB_TITLE=self.sub_title),
            'REV_ARTICLE_FOLDER_PREFIX': '../',
        }

    @property
    def _base_name(self):
        return os.path.join(self._article_folder, 'article_'+ self.article_hash)

    def set_document_links(self, pre_article_hash, nxt_article_hash):
        self.pre_link = os.path.join('..', self._article_folder, 'article_'+ pre_article_hash + '.html') if pre_article_hash else None
        self.pre_arrow = '<li class="page-item{STATUS}"><a class="page-link" href="{TARGET}">&larr; Older</a></li>'.format(
            STATUS = '' if self.pre_link else ' disabled',
            TARGET = self.pre_link or '#',
        )
        self.nxt_link = os.path.join('..', self._article_folder, 'article_'+ nxt_article_hash + '.html') if nxt_article_hash else None
        self.nxt_arrow = '<li class="page-item{STATUS}"><a class="page-link" href="{TARGET}">Newer &rarr;</a></li>'.format(
            STATUS = '' if self.nxt_link else ' disabled',
            TARGET = self.nxt_link or '#',
        )

    def extract(self, line):
        return re.match(r'<[^<^>]*>(.*)<[^<^>]*>', line).group(1)

    def customize_content(self):
        return '''
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <h2> {TITLE} </h2>
                    <h3> {SUB_TITLE} </h3>
                    <br>
                    <p align="right"> <i class="fa fa-pencil-square-o" aria-hidden="true"></i> Last edited on {MTIME} </p>

                    <hr>
                </div>

                <div class="col-md-12">
                    <ul class="pagination pg-blue justify-content-center">
                        {PRE_ARROW}
                        {NXT_ARROW}
                    </ul>

                    <!-- Below content is auto-generated by pandoc -->
{BLOG_TEXT}
                    <!-- Above content is auto-generated by pandoc -->

                    <hr>

                    <div class="fb-like" data-href={URL} data-layout="standard" data-action="like" data-size="small" data-show-faces="true" data-share="true"></div>
                    <br>
                    <br>
                    <div class="fb-comments" data-href={URL} data-width="100%" data-numposts="5"></div>

                    <br>
                    <br>
                </div>
            </div>
        </div>'''.format(TITLE=self.title, SUB_TITLE=self.sub_title, MTIME=self.mtime, PRE_ARROW=self.pre_arrow, NXT_ARROW=self.nxt_arrow, BLOG_TEXT=self.blog_text, URL=self.url)



class BlogPage(BasePage):
    def __init__(self):
        super().__init__()
        self._folder = 'blog'
        self._article_folder = 'article-pages'
        self.PREVIEW_LIMIT = 290

    @property
    def _base_name(self):
        return 'BLOG'

    def clean(self):
        file_names = os.listdir(self._folder)
        article_names = [x for x in file_names if x.find('article') >= 0]

        for article_name in article_names:
            os.remove(os.path.join(self._folder, article_name))

    def customize_content(self):
        s = '''         <div class="container">
            <div class="page-header">
                <h2> Blog </h2>
            </div>

            <hr>
'''
        folder_names = os.listdir(self._folder)
        folder_names = [x for x in folder_names if x[0] != '.']

        articles = []
        for folder_name in folder_names:
            proj_name = os.path.join(self._folder, folder_name)
            articles.append(ArticlePage(self._article_folder, proj_name))

        # sort documents with mtime
        articles = sorted(articles, key=lambda article: article.mtime, reverse=True)

        # retrieve documents in order
        for idx, article in enumerate(articles):
            # set up links between documents
            article.set_document_links(
                articles[idx+1].article_hash if idx < len(articles)-1 else None,
                articles[idx-1].article_hash if idx > 0 else None,
            )

            # write articles
            article.run()

            s += '''
            <div class="row">
                <div class="col-md-12">
                    <h4> ''' + article.title + ''' </h4>
                    <h5><i> ''' + article.sub_title + ''' </i></h5>
                    <p> ''' + article.summary[:self.PREVIEW_LIMIT]

            if len(article.summary) > self.PREVIEW_LIMIT:
                s += '...'

            s += '''
                        <a href="''' + article.cur_link + '''"> (Read More) </a>
                    </p>
                </div>
            </div>

            <hr>
'''
        s += '''        </div>'''

        return s
